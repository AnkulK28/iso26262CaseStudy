function varargout = mergeModelCoverage(modelName, varargin)
%mergeModelCoverage Merge coverage results of model
%   Merge coverage results from verifying the model against the high-level
%   software requirements and low-level tests generated by Design Verifier.
%
%   mergeModelCoverage(ModelName)
%   mergeModelCoverage(ModelName, 'CI')

%   Copyright 2021 The MathWorks, Inc.

if ~iec.internal.license('test', 'Simulink Coverage')
    MSLDiagnostic('certqualkit:engine:SLCOVMissLicense').reportAsError;
end
if ~iec.internal.license('test','Simulink Test')
    MSLDiagnostic('certqualkit:engine:SLTESTMissLicense').reportAsError;
end

% Close all models.
if iec.internal.license('test', 'Simulink')
    bdclose('all');
end

disp(['Merging coverage results for ', modelName, '.']);
% Clear all coverage data.
cvexit();

% Capture useful folder/file paths and names.
reqRslt = ProjArtifacts.getUnitMILResultsHLRFile(modelName);
sldvRslt = ProjArtifacts.getUnitMILResultsLLRFile(modelName);

% Delete the old results and reports if they exist.
htmlFile = ProjArtifacts.getUnitMCovMRGHTML(modelName);
if exist(htmlFile, 'file')
    delete(htmlFile);
end
gifDir = ProjArtifacts.getUnitMCovGifs(modelName);
if exist(gifDir, 'dir')
    rmdir(gifDir, 's');
end

% Check for prerequisites.
reqRsltExist = true;
sldvRsltExist =  true;
if ~exist(reqRslt, 'file')
    warning(['Test results ''', reqRslt, ' not found.']);
    reqRsltExist = false;
end
if ~exist(sldvRslt, 'file')
    warning(['Test results ''', sldvRslt, ' not found.']);
    sldvRsltExist = false;
end

if (~sldvRsltExist && ~reqRsltExist)
    varargout{1} = [];
    return;
end
% Load test results into Test Manager.
sltest.testmanager.clear();
sltest.testmanager.clearResults();
if reqRsltExist
    sltest.testmanager.importResults(reqRslt);
end

if sldvRsltExist
    sltest.testmanager.importResults(sldvRslt);
end

results = sltest.testmanager.getResultSets();

covIdx = 0;
for i = 1:length(results)
    if ~isempty(results(i).CoverageResults)
        covIdx = covIdx + 1;
        covResults(covIdx) = cv.cvdatagroup(results(i).CoverageResults);
    end
end

if nargin > 1 && ~isempty(varargin{1})
    cvhtmlOption = ', ''-sRT=0''';
    result.Method = 'mergeModelCoverage';
    result.Component = modelName;
    if covIdx > 0
        cov = covResults(1);
        for i = 2:covIdx
            cov = cov + covResults(i);
        end
        result.CumulativeExecutionCov = executioninfo(cov, modelName);
        result.CumulativeDecisionCov = decisioninfo(cov, modelName);
        result.CumulativeConditionCov = conditioninfo(cov, modelName);
        result.CumulativeMCDCCov = mcdcinfo(cov, modelName);
    end
    if isfield(result,'CumulativeExecutionCov') && ~isempty(result.CumulativeExecutionCov)
        ExecutionOutcome = result.CumulativeExecutionCov(1)/result.CumulativeExecutionCov(2);
    else
        ExecutionOutcome = 1;
    end
    if isfield(result,'CumulativeDecisionCov') && ~isempty(result.CumulativeDecisionCov)
        DecisionOutcome = result.CumulativeDecisionCov(1)/result.CumulativeDecisionCov(2);
    else
        DecisionOutcome = 1;
    end
    if isfield(result,'CumulativeDecisionCov') && ~isempty(result.CumulativeConditionCov)
        ConditionOutcome = result.CumulativeConditionCov(1)/result.CumulativeConditionCov(2);
    else
        ConditionOutcome = 1;
    end
    if isfield(result,'CumulativeDecisionCov') && ~isempty(result.CumulativeMCDCCov)
        MCDCOutcome = result.CumulativeMCDCCov(1)/result.CumulativeMCDCCov(2);
    else
        MCDCOutcome = 1;
    end
    if min([ExecutionOutcome, DecisionOutcome, ConditionOutcome, MCDCOutcome]) < 1
        result.Outcome = 0;
    else
        result.Outcome = 1;
    end
    result.Results = cov;
    varargout{1} = result;
else
    cvhtmlOption = ', ''-sRT=1''';
end
% Generate the coverage report.
if covIdx > 0
    cvStr = 'cvhtml(htmlFile';
    for i = 1:covIdx
        cvStr = [cvStr, ', covResults(', num2str(i), ')'];
    end
    cvStr = [cvStr, cvhtmlOption, ');'];
    eval(cvStr);
    %     cvhtml(htmlFile, covResults(:));
else
    warning('No coverage result.');
end

end
