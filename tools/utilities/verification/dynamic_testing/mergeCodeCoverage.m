function varargout = mergeCodeCoverage(modelName, mode, varargin)
%mergeCodeCoverage Merge coverage results of generated code
%   Merge coverage results from verifying the generated code against the
%   high-level software requirements and low-level tests generated by
%   Design Verifier. Coverage results are collected from exercising the
%   compiled code on either the host computer via SIL simulations or the
%   target computer via PIL simulations.
%
%   mergeCodeCoverage(ModelName, 'SIL')
%   mergeCodeCoverage(ModelName, 'PIL')
%   mergeCodeCoverage(ModelName, 'SIL', 'CI')
%   mergeCodeCoverage(ModelName, 'PIL', 'CI')

%   Copyright 2021 The MathWorks, Inc.

if ~iec.internal.license('test', 'Simulink Coverage')
    MSLDiagnostic('certqualkit:engine:SLCOVMissLicense').reportAsError;
end
if ~iec.internal.license('test','Simulink Test')
    MSLDiagnostic('certqualkit:engine:SLTESTMissLicense').reportAsError;
end

% Close all models.
if iec.internal.license('test','Simulink')
    bdclose('all');
end

% Clear all coverage data.
cvexit();

% Administer options.
if nargin < 2
    error('SIL/PIL simulation mode not specified.');
else
    if strcmpi(mode, 'SIL')
        mode = 'SIL';
    elseif strcmpi(mode, 'PIL')
        mode = 'PIL';
    else
        error('SIL/PIL simulation mode must be either SIL or PIL.');
    end
end

% Capture useful folder/file paths and names.
reqRsltFile = ProjArtifacts.getUnitSPILRBTResFile(modelName, mode, true);
sldvRsltFile = ProjArtifacts.getUnitSPILLLRResFile(modelName, mode, true);
gifDir = ProjArtifacts.getUnitCCovGifs(modelName, mode);

% Delete the old results and reports if they exist.
htmlFile = ProjArtifacts.getUnitMergedCCovHTML(modelName, mode);
htmlDir = fileparts(htmlFile);   
if exist(htmlDir, 'dir')
    rmdir(htmlDir, 's');
end
mkdir(htmlDir);
    
if exist(gifDir, 'dir')
    rmdir(gifDir, 's');
end

% Check for prerequisites.
if ~exist(reqRsltFile, 'file')
    error(['Test results ''', reqRsltFile, ' not found.']);
end
if ~exist(sldvRsltFile, 'file')
    error(['Test results ''', sldvRsltFile, ' not found.']);
end

% Load test results into Test Manager.
clearTestManager();
sltest.testmanager.importResults(sldvRsltFile);
sltest.testmanager.importResults(reqRsltFile);
results = sltest.testmanager.getResultSets();

covIdx = 0;
for i = 1:length(results)
    if ~isempty(results(i).CoverageResults)
        covIdx = covIdx + 1;
        covResults(covIdx) = cv.cvdatagroup(results(i).CoverageResults);
    end
end

if nargin > 2 && ~isempty(varargin{1})
    cvhtmlOption = ', ''-sRT=0''';
    result.Method = 'mergeCodeCoverage';
    result.Component = modelName;
    if covIdx > 0
        cov = covResults(1);
        for i = 2:covIdx
            cov = cov + covResults(i);
        end
        result.CumulativeExecutionCov = executioninfo(cov, modelName);
        result.CumulativeDecisionCov = decisioninfo(cov, modelName);
        result.CumulativeConditionCov = conditioninfo(cov, modelName);
        result.CumulativeMCDCCov = mcdcinfo(cov, modelName);
    end
    if ~isempty(result.CumulativeExecutionCov)
        ExecutionOutcome = result.CumulativeExecutionCov(1)/result.CumulativeExecutionCov(2);
    else
        ExecutionOutcome = 1;
    end
    if ~isempty(result.CumulativeDecisionCov)
        DecisionOutcome = result.CumulativeDecisionCov(1)/result.CumulativeDecisionCov(2);
    else
        DecisionOutcome = 1;
    end
    if ~isempty(result.CumulativeConditionCov)
        ConditionOutcome = result.CumulativeConditionCov(1)/result.CumulativeConditionCov(2);
    else
        ConditionOutcome = 1;
    end
    if ~isempty(result.CumulativeMCDCCov)
        MCDCOutcome = result.CumulativeMCDCCov(1)/result.CumulativeMCDCCov(2);
    else
        MCDCOutcome = 1;
    end
    if min([ExecutionOutcome, DecisionOutcome, ConditionOutcome, MCDCOutcome]) < 1
        result.Outcome = 0;
    else
        result.Outcome = 1;
    end
    result.Results = cov;
    varargout{1} = result;
else
    cvhtmlOption = ', ''-sRT=1''';
end

% Generate the coverage report.
if covIdx > 0
    cvStr = 'cvhtml(htmlFile';
    for i = 1:covIdx
        cvStr = [cvStr, ', covResults(', num2str(i), ')'];
    end
    cvStr = [cvStr, cvhtmlOption, ');'];
    eval(cvStr);
    %     cvhtml(htmlFile, covResults(:));
else
    warning('No coverage result.');
end

end
